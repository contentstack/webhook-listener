name: Release

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - run: npm install

      - name: get-package-details
        id: package
        uses: codex-team/action-nodejs-package-info@v1.1
      - name: install npm packall
        run: npm install npm-pack-all

      - run: node node_modules/.bin/npm-pack-all
      - uses: Klemensas/action-autotag@stable
        id: update_tag
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          tag_prefix: "v"
      - name: Create Release
        if: steps.update_tag.outputs.tagname
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.update_tag.outputs.tagname }}
          release_name: Release ${{ steps.update_tag.outputs.tagname }}
          draft: false # Default value, but nice to set explicitly
          prerelease: false # Default value, but nice to set explicitly
      - name: Upload Release Asset
        if: steps.update_tag.outputs.tagname
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./contentstack-webhook-listener-${{ steps.package.outputs.version }}.tgz
          asset_name: contentstack-webhook-listener-${{ steps.package.outputs.version }}.tgz
          asset_content_type: application/tgz